# groq_minuta_generator.py
import os
import time
from typing import List, Dict, Optional, Any

from groq import Groq


class GroqMinutaGenerator:
    def __init__(self, api_key: Optional[str] = None):
        """
        Inicializa o gerador com a API key do Groq

        API Key gratuita: https://console.groq.com/keys
        """
        self.api_key = api_key or os.getenv("GROQ_API_KEY")
        if not self.api_key:
            raise ValueError("GROQ_API_KEY n√£o encontrada. Defina a vari√°vel de ambiente ou passe como par√¢metro.")

        self.client = Groq(api_key=self.api_key)
        # Modelo recomendado: r√°pido e de qualidade
        self.model = "llama3-70b-8192"
        
        # Rate limiting
        self.max_requests_per_minute = 30
        self.request_timestamps = []

    def format_similar_cases(self, similar_cases: List[Dict]) -> str:
        """Formata casos similares para o prompt"""
        if not similar_cases:
            return "Nenhum precedente similar encontrado."

        formatted = ""
        for i, case in enumerate(similar_cases[:3], 1):  # Top 3 casos
            formatted += f"""
        PRECEDENTE {i} (Score: {case.get('score', 0):.2f}):
        - ID: {case.get('id')}
        - Recurso: "{case.get('description', '')[:300]}..."
        - Decis√£o Final: {case.get('decision')}
        - Inst√¢ncia: {case.get('instance')}
        - Resposta da CGU: "{case.get('response', '')[:400]}..."
        
        """
        return formatted

    def format_decision_stats(self, decision_stats: Dict) -> str:
        """Formata estat√≠sticas de decis√£o"""
        if not decision_stats:
            return "Nenhuma estat√≠stica dispon√≠vel."

        stats_text = "üìä ESTAT√çSTICAS DE DECIS√ïES SIMILARES:\n"
        total_cases = sum(data['count'] for data in decision_stats.values())

        for decision, data in sorted(decision_stats.items(),
                                     key=lambda x: x[1]['percentage'], reverse=True):
            stats_text += f"‚Ä¢ {decision}: {data['count']} casos ({data['percentage']}%)\n"

        stats_text += f"\nTotal de precedentes analisados: {total_cases} casos"
        return stats_text

    def generate_minuta(self, appeal_text: str, similar_cases: List[Dict],
                        prediction: str, decision_stats: Dict) -> Dict[str, str]:
        """
        Gera minuta oficial usando Groq

        Returns:
            Dict com 'minuta' e 'metadata'
        """

        # Preparar dados contextuais
        similar_cases_text = self.format_similar_cases(similar_cases)
        stats_text = self.format_decision_stats(decision_stats)

        # Prompt otimizado para qualidade jur√≠dica
        system_prompt = """Voc√™ √© um servidor s√™nior da CGU (Controladoria-Geral da Uni√£o) com 15 anos de experi√™ncia em Lei de Acesso √† Informa√ß√£o (LAI). 

        Sua expertise inclui:
        - Lei 12.527/2011 (LAI)
        - Decreto 7.724/2012
        - Jurisprud√™ncia consolidada da CGU
        - Reda√ß√£o t√©cnica oficial
        
        RESPONSABILIDADE: Gerar minutas de alta qualidade t√©cnica que servir√£o como base para decis√µes oficiais da CGU."""

        user_prompt = f"""TAREFA: Gere uma minuta de resposta oficial para o recurso LAI apresentado.

        üìã RECURSO INTERPOSTO:
        {appeal_text}
        
        {similar_cases_text}
        
        {stats_text}
        
        ü§ñ PREDI√á√ÉO IA: {prediction}
        
        üìù INSTRU√á√ïES PARA A MINUTA:
        
        1. **ESTRUTURA OBRIGAT√ìRIA:**
           - Cabe√ßalho "DECIS√ÉO"
           - Se√ß√£o "CONSIDERANDO" (fundamenta√ß√£o)
           - Se√ß√£o "DECIDO" (dispositivo)
           - Identifica√ß√£o de prazos recursais
        
        2. **FUNDAMENTA√á√ÉO JUR√çDICA:**
           - Cite artigos espec√≠ficos da Lei 12.527/2011
           - Referencie o Decreto 7.724/2012
           - Use precedentes similares quando relevante
           - Mantenha consist√™ncia com a jurisprud√™ncia
        
        3. **QUALIDADE T√âCNICA:**
           - Linguagem formal e jur√≠dica apropriada
           - Argumenta√ß√£o clara e objetiva
           - Conclus√£o coerente com os precedentes
           - Praticidade para o servidor revisar
        
        4. **DECIS√ÉO BASEADA EM DADOS:**
           - Considere as estat√≠sticas apresentadas
           - Justifique com base nos precedentes
           - Se divergir da predi√ß√£o, explique os motivos
        
        IMPORTANTE: Esta minuta ser√° revisada por um servidor antes da publica√ß√£o oficial. Foque na qualidade t√©cnica e consist√™ncia jur√≠dica.
        
        MINUTA:"""

        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.1,  # Baixa criatividade para consist√™ncia
                max_tokens=1500,
                top_p=0.9
            )

            minuta = response.choices[0].message.content.strip()

            return {
                "minuta": minuta,
                "metadata": {
                    "model_used": self.model,
                    "tokens_used": response.usage.total_tokens,
                    "generation_time": "~2 segundos",
                    "similar_cases_count": len(similar_cases),
                    "prediction_confidence": prediction
                }
            }

        except Exception as e:
            return {
                "minuta": self.generate_fallback_minuta(appeal_text, prediction),
                "metadata": {
                    "error": str(e),
                    "fallback_used": True
                }
            }

    def generate_fallback_minuta(self, appeal_text: str, prediction: str) -> str:
        """Minuta b√°sica caso a API falhe"""
        return f"""DECIS√ÉO

        Em an√°lise ao recurso interposto, com fundamento no art. 21 do Decreto n¬∫ 7.724/2012, que regulamenta a Lei n¬∫ 12.527/2011 (Lei de Acesso √† Informa√ß√£o), apresento a seguinte an√°lise:
        
        CONSIDERANDO o recurso apresentado pelo cidad√£o, que solicita revis√£o da decis√£o de primeira inst√¢ncia;
        
        CONSIDERANDO que a an√°lise automatizada baseada em precedentes similares indica: {prediction};
        
        CONSIDERANDO as disposi√ß√µes da Lei n¬∫ 12.527/2011, especialmente os artigos 3¬∫, 5¬∫ e 7¬∫, que estabelecem o direito fundamental de acesso √† informa√ß√£o;
        
        CONSIDERANDO o Decreto n¬∫ 7.724/2012, que regulamenta os procedimentos para garantia do direito de acesso √† informa√ß√£o;
        
        [DECIS√ÉO ESPEC√çFICA A SER COMPLETADA PELO SERVIDOR RESPONS√ÅVEL COM BASE NA AN√ÅLISE DETALHADA DO CASO]
        
        Prazo para recurso √† inst√¢ncia superior: 10 (dez) dias, conforme art. 21 do Decreto n¬∫ 7.724/2012.
        
        [NOME DO SERVIDOR RESPONS√ÅVEL]
        [CARGO/FUN√á√ÉO]
        [DATA]
        
        ---
        OBSERVA√á√ÉO T√âCNICA: Minuta gerada automaticamente com base em an√°lise de precedentes. Deve ser revisada e personalizada pelo servidor competente antes da publica√ß√£o oficial."""

    def test_api_connection(self) -> bool:
        """Testa se a API est√° funcionando"""
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": "Teste: responda apenas 'OK'"}],
                max_tokens=10
            )
            print("Resposta da API:", response)
            return "OK" in response.choices[0].message.content
        except Exception as e:
            print("Erro ao testar conex√£o com a Groq:", e)
            return False
    
    def get_usage_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas de uso do gerador."""
        now = time.time()
        recent_requests = [ts for ts in self.request_timestamps if now - ts < 60]
        
        return {
            "requests_last_minute": len(recent_requests),
            "max_requests_per_minute": self.max_requests_per_minute,
            "rate_limit_remaining": max(0, self.max_requests_per_minute - len(recent_requests)),
            "model": self.model,
            "api_key_configured": bool(self.api_key)
        }